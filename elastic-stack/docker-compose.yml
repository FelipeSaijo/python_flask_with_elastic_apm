version: "3.8"

# volumes:
#   certs:
#     driver: local
#   esdata01:
#     driver: local
#   kibanadata:
#     driver: local
#   metricbeatdata01:
#     driver: local
#   filebeatdata01:
#     driver: local
#   logstashdata01:
#     driver: local

# networks:
#   default:
#     name: elastic
#     external: false

# services:
#   setup:
#     image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
#     volumes:
#       - certs:/usr/share/elasticsearch/config/certs
#     user: "0"
#     command: >
#       bash -c '
#         if [ x${ELASTIC_PASSWORD} == x ]; then
#           echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
#           exit 1;
#         elif [ x${KIBANA_PASSWORD} == x ]; then
#           echo "Set the KIBANA_PASSWORD environment variable in the .env file";
#           exit 1;
#         fi;
#         if [ ! -f config/certs/ca.zip ]; then
#           echo "Creating CA";
#           bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
#           unzip config/certs/ca.zip -d config/certs;
#         fi;
#         if [ ! -f config/certs/certs.zip ]; then
#           echo "Creating certs";
#           echo -ne \
#           "instances:\n"\
#           "  - name: elasticsearch\n"\
#           "    dns:\n"\
#           "      - elasticsearch\n"\
#           "      - localhost\n"\
#           "    ip:\n"\
#           "      - 127.0.0.1\n"\
#           "  - name: kibana\n"\
#           "    dns:\n"\
#           "      - kibana\n"\
#           "      - localhost\n"\
#           "    ip:\n"\
#           "      - 127.0.0.1\n"\
#           > config/certs/instances.yml;
#           bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
#           unzip config/certs/certs.zip -d config/certs;
#         fi;
#         echo "Setting file permissions"
#         chown -R root:root config/certs;
#         find . -type d -exec chmod 750 \{\} \;;
#         find . -type f -exec chmod 640 \{\} \;;
#         echo "Waiting for Elasticsearch availability";
#         until curl -s --cacert config/certs/ca/ca.crt https://elasticsearch:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
#         echo "Setting kibana_system password";
#         until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://elasticsearch:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
#         echo "All done!";
#       '
#     healthcheck:
#       test: [ "CMD-SHELL", "[ -f config/certs/elasticsearch/elasticsearch.crt ]" ]
#       interval: 1s
#       timeout: 5s
#       retries: 120

#   elasticsearch:
#     depends_on:
#       setup:
#         condition: service_healthy
#     image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
#     labels:
#       co.elastic.logs/module: elasticsearch
#     volumes:
#       - certs:/usr/share/elasticsearch/config/certs
#       - esdata01:/usr/share/elasticsearch/data
#     ports:
#       - ${ES_PORT}:9200
#     environment:
#       - node.name=elasticsearch
#       - cluster.name=${CLUSTER_NAME}
#       - discovery.type=single-node
#       - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
#       - bootstrap.memory_lock=true
#       - xpack.security.enabled=true
#       - xpack.security.http.ssl.enabled=true
#       - xpack.security.http.ssl.key=certs/elasticsearch/elasticsearch.key
#       - xpack.security.http.ssl.certificate=certs/elasticsearch/elasticsearch.crt
#       - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
#       - xpack.security.transport.ssl.enabled=true
#       - xpack.security.transport.ssl.key=certs/elasticsearch/elasticsearch.key
#       - xpack.security.transport.ssl.certificate=certs/elasticsearch/elasticsearch.crt
#       - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
#       - xpack.security.transport.ssl.verification_mode=certificate
#       - xpack.license.self_generated.type=${LICENSE}
#     mem_limit: ${ES_MEM_LIMIT}
#     ulimits:
#       memlock:
#         soft: -1
#         hard: -1
#     healthcheck:
#       test:
#         [
#           "CMD-SHELL",
#           "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'"
#         ]
#       interval: 10s
#       timeout: 10s
#       retries: 120

#   kibana:
#     depends_on:
#       elasticsearch:
#         condition: service_healthy
#     image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
#     labels:
#       co.elastic.logs/module: kibana
#     volumes:
#       - certs:/usr/share/kibana/config/certs
#       - kibanadata:/usr/share/kibana/data
#     ports:
#       - ${KIBANA_PORT}:5601
#     environment:
#       - SERVERNAME=kibana
#       - ELASTICSEARCH_HOSTS=https://elasticsearch:9200
#       - ELASTICSEARCH_USERNAME=kibana_system
#       - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
#       - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
#       - XPACK_SECURITY_ENCRYPTIONKEY=${ENCRYPTION_KEY}
#       - XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY=${ENCRYPTION_KEY}
#       - XPACK_REPORTING_ENCRYPTIONKEY=${ENCRYPTION_KEY}
#     mem_limit: ${KB_MEM_LIMIT}
#     healthcheck:
#       test:
#         [
#           "CMD-SHELL",
#           "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'"
#         ]
#       interval: 10s
#       timeout: 10s
#       retries: 120

#   metricbeat01:
#    depends_on:
#      elasticsearch:
#        condition: service_healthy
#      kibana:
#        condition: service_healthy
#    image: docker.elastic.co/beats/metricbeat:${STACK_VERSION}
#    user: root
#    volumes:
#      - certs:/usr/share/metricbeat/certs
#      - metricbeatdata01:/usr/share/metricbeat/data
#      - "./metricbeat.yml:/usr/share/metricbeat/metricbeat.yml:ro"
#      - "/var/run/docker.sock:/var/run/docker.sock:ro"
#      - "/sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro"
#      - "/proc:/hostfs/proc:ro"
#      - "/:/hostfs:ro"
#    environment:
#      - ELASTIC_USER=elastic
#      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
#      - ELASTIC_HOSTS=https://elasticsearch:9200
#      - KIBANA_HOSTS=http://kibana:5601
#      - LOGSTASH_HOSTS=http://logstash01:9600

#   filebeat01:
#    depends_on:
#      elasticsearch:
#        condition: service_healthy
#    image: docker.elastic.co/beats/filebeat:${STACK_VERSION}
#    user: root
#    volumes:
#      - certs:/usr/share/filebeat/certs
#      - filebeatdata01:/usr/share/filebeat/data
#      - "./filebeat_ingest_data/:/usr/share/filebeat/ingest_data/"
#      - "./filebeat.yml:/usr/share/filebeat/filebeat.yml:ro"
#      - "/var/lib/docker/containers:/var/lib/docker/containers:ro"
#      - "/var/run/docker.sock:/var/run/docker.sock:ro"
#    environment:
#      - ELASTIC_USER=elastic
#      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
#      - ELASTIC_HOSTS=https://elasticsearch:9200
#      - KIBANA_HOSTS=http://kibana:5601
#      - LOGSTASH_HOSTS=http://logstash01:9600

#   logstash01:
#    depends_on:
#      elasticsearch:
#        condition: service_healthy
#      kibana:
#        condition: service_healthy
#    image: docker.elastic.co/logstash/logstash:${STACK_VERSION}
#    labels:
#      co.elastic.logs/module: logstash
#    user: root
#    volumes:
#      - certs:/usr/share/logstash/certs
#      - logstashdata01:/usr/share/logstash/data
#      - "./logstash_ingest_data/:/usr/share/logstash/ingest_data/"
#      - "./logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro"
#    environment:
#      - xpack.monitoring.enabled=false
#      - ELASTIC_USER=elastic
#      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
#      - ELASTIC_HOSTS=https://elasticsearch:9200

services:
  setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
    user: "0"
    command: >
      bash -c '
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ x${KIBANA_PASSWORD} == x ]; then
          echo "Set the KIBANA_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: elasticsearch\n"\
          "    dns:\n"\
          "      - elasticsearch\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "  - name: kibana\n"\
          "    dns:\n"\
          "      - kibana\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://elasticsearch:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting kibana_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://elasticsearch:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "All done!";
      '
    healthcheck:
      test: [ "CMD-SHELL", "[ -f config/certs/elasticsearch/elasticsearch.crt ]" ]
      interval: 1s
      timeout: 5s
      retries: 120

  elasticsearch:
    depends_on:
      setup:
        condition: service_healthy
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    labels:
      co.elastic.logs/module: elasticsearch
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - elasticsearchdata:/usr/share/elasticsearch/data
    ports:
      - ${ES_PORT}:9200
    environment:
      - node.name=elasticsearch
      - cluster.name=${CLUSTER_NAME}
      - discovery.type=single-node
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/elasticsearch/elasticsearch.key
      - xpack.security.http.ssl.certificate=certs/elasticsearch/elasticsearch.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/elasticsearch/elasticsearch.key
      - xpack.security.transport.ssl.certificate=certs/elasticsearch/elasticsearch.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
    mem_limit: ${ES_MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'"
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  kibana:
    depends_on:
      elasticsearch:
        condition: service_healthy
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    labels:
      co.elastic.logs/module: kibana
    volumes:
      - certs:/usr/share/kibana/config/certs
      - kibanadata:/usr/share/kibana/data
    ports:
      - ${KIBANA_PORT}:5601
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=https://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
      - XPACK_SECURITY_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      - XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      - XPACK_REPORTING_ENCRYPTIONKEY=${ENCRYPTION_KEY}
    mem_limit: ${KB_MEM_LIMIT}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'"
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  apm-server:
    image: docker.elastic.co/apm/apm-server:${STACK_VERSION}
    cap_add: ["CHOWN", "DAC_OVERRIDE", "SETGID", "SETUID"]
    cap_drop: ["ALL"]
    ports:
    - 8200:8200
    command: >
       apm-server -e
         -E apm-server.rum.enabled=true
         -E setup.kibana.host=kibana:5601
         -E setup.template.settings.index.number_of_replicas=0
         -E apm-server.kibana.enabled=true
         -E apm-server.kibana.host=kibana:5601
         -E output.elasticsearch.hosts=["https://elasticsearch:9200"]
         -E output.elasticsearch.username="elastic"
         -E output.elasticsearch.password="qualquercoisa123"
         -E output.elasticsearch.ssl.verification_mode=none
         -E output.elasticsearch.ssl.ca_trusted_fingerprint="bc3e5215127e24ea8deb9cb6216de5bd594f17cfd6a65a640f1ab11e6e4cbbc8"
    healthcheck:
      interval: 10s
      retries: 12
      test: curl --write-out 'HTTP %{http_code}' --fail --silent --output /dev/null http://localhost:8200/

volumes:
  elasticsearchdata:
    driver: local
  kibanadata:
    driver: local
  certs:
    driver: local

networks:
  default:
    name: elastic
    external: false